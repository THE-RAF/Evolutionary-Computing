# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\UFU\Disciplinas Outros Cursos\Computação Evolucionária\Tarefas\Tarefa 2 - Algoritmo Genético Simples\ga_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
from matplotlib import style
# style.use('seaborn')
import numpy as np

import genetic_algorithm


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Genetic Algorithm")
        MainWindow.resize(857, 618)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setMinimumSize(QtCore.QSize(450, 300))
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.topMenu = QtWidgets.QFrame(self.centralwidget)
        self.topMenu.setMaximumSize(QtCore.QSize(16777215, 45))
        self.topMenu.setStyleSheet("background-color: rgb(234, 234, 234);")
        self.topMenu.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.topMenu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.topMenu.setObjectName("topMenu")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.topMenu)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.optimizeButton = QtWidgets.QPushButton(self.topMenu)
        self.optimizeButton.setMinimumSize(QtCore.QSize(0, 0))
        self.optimizeButton.setObjectName("optimizeButton")
        self.horizontalLayout_2.addWidget(self.optimizeButton)
        self.equationLineEd = QtWidgets.QLineEdit(self.topMenu)
        self.equationLineEd.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.equationLineEd.setText("")
        self.equationLineEd.setObjectName("equationLineEd")
        self.horizontalLayout_2.addWidget(self.equationLineEd)
        self.verticalLayout.addWidget(self.topMenu)
        self.content = QtWidgets.QFrame(self.centralwidget)
        self.content.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.content.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.content.setFrameShadow(QtWidgets.QFrame.Raised)
        self.content.setObjectName("content")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.content)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.paramsMenu = QtWidgets.QFrame(self.content)
        self.paramsMenu.setMinimumSize(QtCore.QSize(0, 0))
        self.paramsMenu.setMaximumSize(QtCore.QSize(200, 16777215))
        self.paramsMenu.setStyleSheet("background-color: rgb(185, 185, 185);")
        self.paramsMenu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.paramsMenu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.paramsMenu.setObjectName("paramsMenu")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.paramsMenu)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.paramsFrame = QtWidgets.QFrame(self.paramsMenu)
        self.paramsFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.paramsFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.paramsFrame.setObjectName("paramsFrame")
        self.gridLayout = QtWidgets.QGridLayout(self.paramsFrame)
        self.gridLayout.setObjectName("gridLayout")
        self.numGenLabel = QtWidgets.QLabel(self.paramsFrame)
        self.numGenLabel.setObjectName("numGenLabel")
        self.gridLayout.addWidget(self.numGenLabel, 0, 0, 1, 1)
        self.numGenLineEd = QtWidgets.QLineEdit(self.paramsFrame)
        self.numGenLineEd.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.numGenLineEd.setObjectName("numGenLineEd")
        self.gridLayout.addWidget(self.numGenLineEd, 0, 1, 1, 1)
        self.mutRateLabel = QtWidgets.QLabel(self.paramsFrame)
        self.mutRateLabel.setObjectName("mutRateLabel")
        self.gridLayout.addWidget(self.mutRateLabel, 3, 0, 1, 1)
        self.mutRateLineEd = QtWidgets.QLineEdit(self.paramsFrame)
        self.mutRateLineEd.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.mutRateLineEd.setObjectName("mutRateLineEd")
        self.gridLayout.addWidget(self.mutRateLineEd, 3, 1, 1, 1)
        self.popSizeLineEd = QtWidgets.QLineEdit(self.paramsFrame)
        self.popSizeLineEd.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.popSizeLineEd.setObjectName("popSizeLineEd")
        self.gridLayout.addWidget(self.popSizeLineEd, 1, 1, 1, 1)
        self.crossRateLabel = QtWidgets.QLabel(self.paramsFrame)
        self.crossRateLabel.setObjectName("crossRateLabel")
        self.gridLayout.addWidget(self.crossRateLabel, 2, 0, 1, 1)
        self.popSizeLabel = QtWidgets.QLabel(self.paramsFrame)
        self.popSizeLabel.setObjectName("popSizeLabel")
        self.gridLayout.addWidget(self.popSizeLabel, 1, 0, 1, 1)
        self.crossRateLineEd = QtWidgets.QLineEdit(self.paramsFrame)
        self.crossRateLineEd.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.crossRateLineEd.setObjectName("crossRateLineEd")
        self.gridLayout.addWidget(self.crossRateLineEd, 2, 1, 1, 1)
        self.genSizeLineEd = QtWidgets.QLineEdit(self.paramsFrame)
        self.genSizeLineEd.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.genSizeLineEd.setObjectName("genSizeLineEd")
        self.gridLayout.addWidget(self.genSizeLineEd, 4, 1, 1, 1)
        self.genSizeLabel = QtWidgets.QLabel(self.paramsFrame)
        self.genSizeLabel.setObjectName("genSizeLabel")
        self.gridLayout.addWidget(self.genSizeLabel, 4, 0, 1, 1)
        self.intervalLowLineEd = QtWidgets.QLineEdit(self.paramsFrame)
        self.intervalLowLineEd.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.intervalLowLineEd.setObjectName("intervalLowLineEd")
        self.gridLayout.addWidget(self.intervalLowLineEd, 5, 1, 1, 1)
        self.intervalLowLabel = QtWidgets.QLabel(self.paramsFrame)
        self.intervalLowLabel.setObjectName("intervalLowLabel")
        self.gridLayout.addWidget(self.intervalLowLabel, 5, 0, 1, 1)
        self.intervalHighLabel = QtWidgets.QLabel(self.paramsFrame)
        self.intervalHighLabel.setObjectName("intervalHighLabel")
        self.gridLayout.addWidget(self.intervalHighLabel, 6, 0, 1, 1)
        self.intervalHighLineEd = QtWidgets.QLineEdit(self.paramsFrame)
        self.intervalHighLineEd.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.intervalHighLineEd.setObjectName("intervalHighLineEd")
        self.gridLayout.addWidget(self.intervalHighLineEd, 6, 1, 1, 1)
        self.verticalLayout_2.addWidget(self.paramsFrame)
        self.supportFrame = QtWidgets.QFrame(self.paramsMenu)
        self.supportFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.supportFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.supportFrame.setObjectName("supportFrame")
        self.verticalLayout_2.addWidget(self.supportFrame)
        self.horizontalLayout.addWidget(self.paramsMenu)
        self.plotFrame = QtWidgets.QFrame(self.content)
        self.plotFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.plotFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.plotFrame.setObjectName("plotFrame")
        self.plotFrameLayout = QtWidgets.QVBoxLayout(self.plotFrame)
        self.plotFrameLayout.setContentsMargins(0, 0, 0, 0)
        self.plotFrameLayout.setSpacing(6)
        self.plotFrameLayout.setObjectName("plotFrameLayout")
        self.horizontalLayout.addWidget(self.plotFrame)
        self.verticalLayout.addWidget(self.content)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 857, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.setupPlotting()

        self.optimizeButton.clicked.connect(self.optimizeButtonClicked)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def optimizeButtonClicked(self):
        equation_string = self.equationLineEd.text()
        self.GA_backend = GABackend(
            equation_string=equation_string,
            interval=[float(self.intervalLowLineEd.text()), float(self.intervalHighLineEd.text())],
            pop_size=int(self.popSizeLineEd.text()),
            crossover_rate=float(self.crossRateLineEd.text()),
            mutation_rate=float(self.mutRateLineEd.text()),
            num_generations=int(self.numGenLineEd.text()),
            genome_size=int(self.genSizeLineEd.text()),
            )

        self.timer = QtCore.QTimer()
        self.timer.setInterval(100)
        self.timer.timeout.connect(lambda: self.updatePlot(equation_string))
        self.timer.start()

    def setupPlotting(self):
        self.figure = plt.figure()
        self.canvas = FigureCanvas(self.figure)
        self.toolbar = NavigationToolbar(self.canvas, self.plotFrame)

        self.plotFrameLayout.addWidget(self.canvas)
        self.plotFrameLayout.addWidget(self.toolbar)

    def updatePlot(self, equation_string):
        interval_upper_bound = float(self.intervalHighLineEd.text())
        interval_lower_bound = float(self.intervalLowLineEd.text())

        x_equation = np.linspace(interval_lower_bound, interval_upper_bound, num=300)
        y_equation = [eval(f'lambda x: {equation_string}')(x) for x in x_equation]

        current_population, done = self.GA_backend.GA.run_generation()
        x_genomes, y_genomes = self.GA_backend.get_xy_values_by_population(current_population)

        best_genome = self.GA_backend.GA.best_genome
        best_genome_x, best_genome_y = self.GA_backend.get_xy_values_by_population([best_genome])

        self.figure.clear()
        ax = self.figure.add_subplot(111)

        ax.plot(x_equation, y_equation, c='k', alpha=0.7, zorder=0)
        ax.scatter(x_genomes, y_genomes, c='#D60000', s=10, zorder=1)
        ax.scatter(best_genome_x, best_genome_y, c='#0063F2', s=15, zorder=1)
        self.canvas.draw()

        if done: self.timer.stop()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Genetic Algorithm"))
        self.optimizeButton.setText(_translate("MainWindow", "Optimize"))
        self.equationLineEd.setPlaceholderText(_translate("MainWindow", "Insert function to optimize"))
        self.numGenLabel.setText(_translate("MainWindow", "Num generations:"))
        self.mutRateLabel.setText(_translate("MainWindow", "Mutation rate:"))
        self.crossRateLabel.setText(_translate("MainWindow", "Crossover rate:"))
        self.popSizeLabel.setText(_translate("MainWindow", "Population size:"))
        self.genSizeLabel.setText(_translate("MainWindow", "Genome size:"))
        self.intervalLowLabel.setText(_translate("MainWindow", "Interval low:"))
        self.intervalHighLabel.setText(_translate("MainWindow", "Interval high:"))


class GABackend:
    def __init__(self,
        equation_string,
        interval,
        pop_size,
        crossover_rate,
        mutation_rate,
        num_generations,
        genome_size,
        ):

        self.equation_string = equation_string
        self.interval = interval

        self.GA = genetic_algorithm.GA(
            pop_size=pop_size,
            fitness_function=lambda genome: self.fitness_function(genome, self.equation_string),
            crossover_rate=crossover_rate,
            mutation_rate=mutation_rate,
            num_generations=num_generations,
            genome_size=genome_size,
            )

    def fitness_function(self, genome, equation_string):
        x = genetic_algorithm.translate_bits_to_float(bit_string=genome.genes[::-1], interval=self.interval)

        return eval(equation_string)

    def get_xy_values_by_population(self, population):
        xs = []
        ys = []

        for genome in population:
            xs.append(genetic_algorithm.translate_bits_to_float(bit_string=genome.genes[::-1], interval=self.interval))
            ys.append(self.GA.fitness_function(genome))

        return xs, ys


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
